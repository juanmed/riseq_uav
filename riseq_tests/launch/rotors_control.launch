<launch>
  <arg name="mav_name" default="pelican"/>
  <arg name="world_name" default="basic"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="debug" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="paused" default="true"/>


  <!-- RISEQ args -->
  <arg name="gate_x" default="6"/>
  <arg name="gate_y" default="6"/>
  <arg name="gate_z" default="1.67"/>
  <arg name="gate_roll" default = "0.0"/>
  <arg name="gate_pitch" default = "0.0"/>
  <arg name="gate_yaw" default = "-1.5707"/>

  <!-- Wall Window args -->
  <arg name="wallwindow_x" default="6"/>
  <arg name="wallwindow_y" default="0"/>
  <arg name="wallwindow_z" default="1.5"/>
  <arg name="wallwindow_roll" default = "1.5707"/>
  <arg name="wallwindow_pitch" default = "0.0"/>
  <arg name="wallwindow_yaw" default = "0.0"/>  

  <!-- Pipe args -->
  <arg name="pipe_x" default="10"/>
  <arg name="pipe_y" default="-6"/>
  <arg name="pipe_z" default="1.5"/>
  <arg name="pipe_roll" default = "0.0"/>
  <arg name="pipe_pitch" default = "0.0"/>
  <arg name="pipe_yaw" default = "3.141692"/> 

  <!-- The following line causes gzmsg and gzerr messages to be printed to the console
      (even when Gazebo is started through roslaunch) -->
  <arg name="verbose" default="false"/>

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose)"/>
  </include>

  <include file="$(find riseq_gazebo)/launch/spawn_sdf.launch">
    <arg name="robot_name" default="drl_gate"/>
    <arg name="x" value="$(arg gate_x)"/>
    <arg name="y" value="$(arg gate_y)"/>
    <arg name="z" value="$(arg gate_z)"/>
    <arg name="roll" value="$(arg gate_roll)"/>
    <arg name="pitch" value="$(arg gate_pitch)"/>
    <arg name="yaw" value="$(arg gate_yaw)"/>
    <arg name="sdf_robot_file" default="$(find riseq_gazebo)/models/drl_gate/drl_gate.sdf"/>
  </include>

  <!-- Wall Window  -->
  <include file="$(find riseq_gazebo)/launch/spawn_sdf.launch">
    <arg name="robot_name" default="wall_window"/>
    <arg name="x" value="$(arg wallwindow_x)"/>
    <arg name="y" value="$(arg wallwindow_y)"/>
    <arg name="z" value="$(arg wallwindow_z)"/>
    <arg name="roll" value="$(arg wallwindow_roll)"/>
    <arg name="pitch" value="$(arg wallwindow_pitch)"/>
    <arg name="yaw" value="$(arg wallwindow_yaw)"/>
    <arg name="sdf_robot_file" default="$(find riseq_gazebo)/models/wall_window/wall_window.sdf"/>
  </include>

  <!-- Pipe  -->
  <include file="$(find riseq_gazebo)/launch/spawn_sdf.launch">
    <arg name="robot_name" default="pipe"/>
    <arg name="x" value="$(arg pipe_x)"/>
    <arg name="y" value="$(arg pipe_y)"/>
    <arg name="z" value="$(arg pipe_z)"/>
    <arg name="roll" value="$(arg pipe_roll)"/>
    <arg name="pitch" value="$(arg pipe_pitch)"/>
    <arg name="yaw" value="$(arg pipe_yaw)"/>
    <arg name="sdf_robot_file" default="$(find riseq_gazebo)/models/pipe/pipe.sdf"/>
  </include>

  <group ns="$(arg mav_name)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_odometry_camera_magnetometer.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
    </include>

    <remap from="odometry" to="odometry_sensor1/odometry" />
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>

  <!-- THIS PARAMETERS CAN BE ELIMINATED, USED ONLY FOR PROJECT SUBMISSION -->
  <param name="/riseq/gate_x" value="$(arg gate_x)" type="double"/>
  <param name="/riseq/gate_y" value="$(arg gate_y)" type="double"/>
  <param name="/riseq/gate_z" value="$(arg gate_z)" type="double"/>
  <param name="/riseq/gate_yaw" value="$(arg gate_yaw)" type="double"/>

  <param name="riseq/gate_pose_nn_cfg" value="$(find riseq_perception)/scripts/ss6p_gate/cfg/yolo-pose.cfg"/>
  <param name="riseq/gate_pose_nn_ply" value="$(find riseq_perception)/scripts/ss6p_gate/cfg/gate.ply"/>
  <param name="riseq/gate_pose_nn_wgt" value="$(find riseq_perception)/scripts/ss6p_gate/weights/model.weights"/>
  <param name="riseq/gate_pose_nn_data" value="$(find riseq_perception)/scripts/ss6p_gate/cfg/gate3.data"/>    

  <rosparam command="load" file="$(find riseq_common)/config/drones/$(arg mav_name).yaml"/>

  <!--node pkg = "riseq_perception" name ="riseq_mono_waypoint_publisher" type="riseq_mono_waypoint_publisher.py" output = "screen"/-->

  <node pkg="riseq_tests" name="riseq_simple_trajectory_publisher" type="riseq_simple_trajectory_publisher.py">
    <remap from="riseq/tests/uav_simple_trajectory" to="riseq/trajectory/uav_trajectory" />
  </node>
  <!--node pkg="riseq_trajectory" name="riseq_MST_publisher" type="MST_publisher.py" output="screen">
    <remap from="riseq/trajectory/uav_reference_trajectory" to="riseq/trajectory/uav_trajectory"/>
  </node-->

  <node name="riseq_high_level_control_publisher" pkg="riseq_control" type="riseq_high_level_control_publisher.py"/>
  <node name="riseq_low_level_control_publisher" pkg="riseq_control" type="riseq_low_level_control_publisher.py"/>
  <node name="rqt_plot" pkg="rqt_plot" type="rqt_plot"/>
  <!--node name="rviz" pkg="rviz" type="rviz"/-->

</launch>
